W poniższej prezentacji będzie stosowana zamiennie nomenktaura VCS = Version Control System = System kontroli wersji

[OK] 1. Historia gita.
2. Wykrozystanie/zastosowania gita.
Cechy
Porównanie z innymi
[OK] Linia komend, komendy / nakladki
3. Zasada działania w praktyce.
4. Mechanizmy działania.
Serwer i tak dalej
GitHub
Repo, komit, branch, merge, konflikt, pull request, blame
branchowanie, tagowanie

X. Spis tresci

===

X. Wprowadzenie
Git jest programem i systemem służącym do kontroli wersji, powszechnie stosowanym w tworzeniu oprogramowania. Używany jest do śledzenia zmian w plikach, koordynacji pracy programistow piszących i modyfikujących kod źródłowy danego oprogramowania. Może być używany do wersjonowania każdego rodzaju plików, ale najczęściej korzysta się z niego do kontroli kodu źródłowego programow komputerowych, czyli de facto plików tekstowych. Z tego powodu może być również wykorzystywany poza programistycznymi zastosowaniami, np. do kontroli dokumentów.

Git jest wolnym oprogramowaniem działającym na licencji GNU GPL. Oznacza to, że jest programem darmowym, który każdy może uruchamiać, a także modyfikować, ponieważ licencja GNU GPL oznacza, że kod źródłowy programu jest otwarty, to znaczy dostępny dla wszystkich.

Pierwsze wydanie Gita pojawilo w sie w 2005 roku. Jego tworca jest Linus Torvalds, znany tez ze stworzenia Linuksa, systemu operacyjnego powszechnie stosowanego w zastosowaniach teleinformatycznych, ale tez do uzytku osobistego, czego najepszym przykladem w ostatnich latach jest Android. Stworzono go, by zastąpić poprzednio używany w rozwoju Linuksa, niebędący wolnym oprogramowaniem, system kontroli wersji BitKeeper. 

===

X. Zapoznanie sie i zasada dzialania w praktyce.

===

X. Nakadki graficzne
Gitem sterujemy domyślnie z poziomu linii poleceń, a więc za pomocą komend tekstowych. Taka metoda daje nam największą elastyczność i możliwości. Przykładowo komenda, która sprawi, że pobierzemy z serwera o nazwie "origin" ostatnie zmiany innych użytkowników to git pull "origin", natomiast stworzenie commita z opisem to git commit -m "Opis commita"
Komend jest bardzo wiele, a kazda posiada wiele dodatkowych opcji. Jednak dla uzytownika zazwyczaj wygodniejsze bedzie korzystanie z nakladek graficznych, w ktorych do wiekszosci powszechnych komend mamy graficzne przyciski, a takze czytelniejsze wyswietlanie zmian czy listy plikow. W tej prezentacji korzystamy z nakladki GitExtensions.

===

X. Mechanizmy przechowywania danych //, cechy// i porownanie z innymi systemami
Zadanie serwera.
Migawki
Inne systemy.

Jest systemem rozproszonym, a więc cały kod źródlowy programu i pełna lista zmian jest przechowywana u kazdego programisty biorącego udział w tworzeniu oprogramowania. Serwer używany będzie do synchronizacji pracy. Niemal wszystkie operacje wykonuje sie lokalnie, dzieki czemu niezwykle rosnie szybkosc. Na serwer wysylany jest koncowy rezultat, o ile rozwiazane sa wszystkie konflikty. Niekiedy konieczne moze byc zatwierdzenie zmian przez innych programistow, w zaleznosci od ustawien.
https://git-scm.com/book/en/v2/images/distributed.png

https://git-scm.com/book/en/v2/images/snapshots.png
Git przechowuje dane jako zestaw migawek, czy tez stanow (ang. snapshots) wszystkich plikow danego projektu. Za kazdym razem gdy w plikach zostaly zrobione jakies zmiany, ktore nastepnie zostaly zapisane (tzw. commit), Git tworzy obraz przedstawiający to jak wyglądają wszystkie pliki w danym momencie i przechowuje odnosnik (referencję) do tej migawki. W celu uzyskania dobrej wydajności, jeśli dany plik nie został zmieniony, Git nie zapisuje ponownie tego pliku, a tylko referencję do jego poprzedniej, identycznej wersji.

Git nie jest jedynym systemem kontroli wersji, inne popularne to np. Mericurial czy ClearCase. Jednak to Git zdobyl najwieksza popularnosc, ostatnimi czasy nawet Microsoft przeniosl kod zrodlowy Windowsa na Gita.

Cechy Gita w porownaniu z innymi systemami kontroli wersji
1. W pelni darmowy.
2. Otwarty - powszechnie dostepny kod zrodlowy, wraz z mozliwoscia swobodnego modyfikowania na wlasne potrzeby.
3. Lekki i szybki - w przeciwienstwie do wielu innych systemow, operacje w Gicie sa szybkie, a sam kod nie zajmuje wiele miejsca. Większość pozostałych systemów przechowuje informacje jako listę zmian na plikach, a nie zestaw migawek.
4. Rozproszony - wiekszosc pozostalych systemow jest stale polaczona z serwerem i kazda operacja przez niego przechodzi.



===

X. Po co system kontroli wersji i dlaczego nie szerowany dysk?
Glowne i najbardziej oczywiste powody dla ktorych uzywa sie systemow kontroli wersji, a nie na przyklad share'owanego dysku to:
1. Pelna kontrola danych - w kazdym momencie mamy dostep do kazdej pojedynczej zmiany w kazdym pojedynczym pliku na dowolnej wersji oprogramowania.
2. Historia zmian, wraz z autorami zmian - kazda zmiana dokladnie opisana, z data i autorem.
3. Brak mozliwosci przypadkowego nadpisania - uzywajac VCS zapewniamy sobie mozliwosc weryfikacji zmian danych. W share'owanym dysku jedna osoba kopiujac po prostu by nadpisala starszy plik. Zagladanie do kazdego pliku celem sprawdzenia potencjalnych pominetych zmian jest bardzo niepraktyczne, a w przypadku duzych plikow niezwykle czasochlonne.
4. Dzieki galeziom mozna dowolnie tworzyc rozne wersje tego samego oprogramowania, wiec nie musi istniec tylko jedna wersja oprogramowania, jesli jest taka potrzeba.

===



===============


Ala.txt
Ala ma jednego burego kota.


Sernik.txt
Lubię sernik z ciastem francuskim.


KtosInny.txt
Ten plik został stworzony przez innego użytkownika. Właśnie pobrałam ten plik na moje lokalne repozytorium. // zwrócenie uwagi, że możemy ten plik zmienić, to nie jest "nasz" plik, to jest plik na repo.



1. Ala.txt create // Ala_I_Serniki
2. Sernik.txt create // Ala_I_Serniki
3. Na gicie: KtosInny.txt
4. Pull request.
5. Push.
6. Na gicie: zmiana Ala.txt
7. Pull request - pokazanie, że Ala.txt zmienione.
8. Na gicie: zmiana Sernik.txt i loklanie zmiana Sernik.txt
9. Pull request - pokazanie konfliktu.

Ala.txt
Ala ma dwa rude koty.

Sernik.txt
Kocham sernik z ciastem francuskim ponad wszystko.

Sernik.txt
Nie lubię sernika z ciastem francuskim.



https://github.com/agmkaumo/Torun.git

https://www.vogella.com/tutorials/Git/article.html
https://learngitbranching.js.org/?locale=pl
https://git-scm.com/book/pl/v2/Pierwsze-kroki-Podstawy-Git
https://miro.medium.com/max/1600/1*xKFLNc2Qws4C6zkMVBWGaA.png
https://medium.com/@onejohi/git-understanding-the-basics-ba004a20dacc
